#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [path]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end

if ARGV.empty?
  abort "Please specify the directory to capify, e.g. `#{File.basename($0)} .'"
elsif !File.exists?(ARGV.first)
  abort "`#{ARGV.first}' does not exist."
elsif !File.directory?(ARGV.first)
  abort "`#{ARGV.first}' is not a directory."
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the directory to capify."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

files = {
  "Capfile" => %q{
load 'deploy'
load 'config/deploy' # remove this line to skip loading any of the default tasks

# vim:ft=ruby

},
  "config/deploy.rb" => %q{###
###
###

require 'capistrano-eden'
# require 'bundler/capistrano' # if using bundler
# require 'codebase/recipes'   # if codebase, tracking deployments
# load 'deploy/assets'         # if rails, using assets

set :user  , "user"
set :group , "app"

set :application , "myapp"
set :repository  , "git@codebasehq.com:mycompany/myproject/#{application}.git"
#et :repository  , "git@bitbucket.org:myself/#{application}.git"   # from bitbucket
#et :repository  , "git@github.com:myself/#{application}.git"      # from github

set :scm              , :git
set :repository_cache , "git-#{application}"
set :deploy_via       , :remote_cache

set :deploy_to        , "/eden/app/#{application}"
set :shared_children  , %w/tmp pid/
set :group_writable   , false
set :keep_releases    , 5

set :bundle_dir       , "#{shared_path}/bundle"
set :bundle_flags     , "--deployment --quiet"

### Define your servers in config/deploy/{dev,prd}.rb
### Example:
###   server "srv1.example.com" , :app , :web, :db, :primary => true
###   server "srv2.example.com" , :app , :web

after "deploy:restart" , "deploy:cleanup"

###
### PATHs Cheat Sheet
###
###   - current_release
###   - latest_release
###   - previous_release
###   - shared_path
###

### Symlink from #{deploy_to}/config
###           to #{latest_release}/config
set :config_files, {
    '*.yml'          => "config/",
   #'unicorn.rb'     => "config/",
   #'production.rb'  => "config/environments/"
}

### Symlink inside RAILS_ROOT
###     source => destination
set :symlinks, {
    '/data/web/assets' => "#{latest_release}/public/assets",
    '/data/web/static' => "#{latest_release}/public/static",
}


namespace :deploy do

  ###
  ### Unicorn
  ###
  [:start, :stop, :status].each do |t|
    desc "Unicorn #{t}"
    task t, :roles => :app, :except => { :no_release => true } do
      run "#{shared_path}/sh/script.sh #{t}"
      #un "#{sudo} /etc/init.d/script.sh #{t}", :pty => true
      #un "touch #{shared_path}/tmp/restart.txt"
    end
  end

  desc "Unicorn restart"
  task :restart, :roles => :app, :except => { :no_release => true } do
    run "#{shared_path}/sh/script.sh restart"
    #un "#{sudo} /etc/init.d/script.sh restart", :pty => true
    #un "touch #{shared_path}/tmp/restart.txt"
  end


  ###
  ### Passenger
  ###
# [:start, :stop, :status].each do |t|
#   desc "Passenger #{t}"
#   task t, :roles => :app, :except => { :no_release => true } do ; end
# end
#
# desc "Passenger restart"
# task :restart, :roles => :app, :except => { :no_release => true } do
#   run "#{try_sudo} touch #{shared_path}/tmp/restart.txt"
# end

end # namespace

# vim:ft=ruby

},

  "config/deploy/dev.rb" => %q{###
### Development
###

server 'srv1.example-dev.com', :app, :web, :db, :primary => true
server 'srv2.example-dev.com', :app, :web
server 'nfs1.example-dev.com', :no_release => true

set :bundle_without ,  [:development, :test]

# vim:ft=ruby:

},
  "config/deploy/prd.rb" => %q{###
### Production
###

server 'srv1.example-prd.com', :app, :web, :db, :primary => true
server 'srv2.example-prd.com', :app, :web
server 'nfs1.example-prd.com', :no_release => true

set :bundle_without ,  [:development, :test]

# vim:ft=ruby:

},
  "config/deploy/vagrant.rb" => %q{###
### My vagrant server
###

server '192.168.33.10', :app, :web, :db, :primary => true

set :bundle_without ,  [:development, :test]

# vim:ft=ruby:

}
}

base = ARGV.shift
files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] '#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
  else
    unless File.exists?(File.dirname(file))
      puts "[add] making directory '#{File.dirname(file)}'"
      FileUtils.mkdir(File.dirname(file))
    end
    puts "[add] writing '#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

puts "[done] capified!"

# vim:ft=ruby:

